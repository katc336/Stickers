generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  username String  @unique
  profile  String?
  password String
  classes  Class[]
}

model Class {
  id         Int          @id @default(autoincrement())
  name       String
  teacher    User         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId  Int
  students   Student[]
  lessons    Lesson[]
  Assignment Assignment[]
}

model Student {
  id              Int               @id @default(autoincrement())
  name            String
  parentCode      String
  studentCode     String            @unique
  class           Class             @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId         Int
  attendances     Attendance[]
  studentProgress StudentProgress[]
  parents         Parent[]
  submissions     Submission[]
  StudentAccount  StudentAccount[]
}

model Assignment {
  id                Int               @id @default(autoincrement())
  name              String
  task              String
  class             Class             @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId           Int
  submissions       Submission[]
  learningObjective LearningObjective @relation(fields: [objectivetId], references: [id], onDelete: Cascade)
  objectivetId      Int
}

model Submission {
  id           Int        @id @default(autoincrement())
  name         String
  createdAt    DateTime   @default(now())
  content      String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId Int
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int
}

model CombinedObjective {
  id                 Int                 @id @default(autoincrement())
  objectiveName      String              @unique
  learningObjectives LearningObjective[]
  studentProgress    StudentProgress[]
}

model Lesson {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  lessonName         String
  date               String              @default("")
  class              Class               @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId            Int
  learningObjectives LearningObjective[]
  attendances        Attendance[]
}

model Attendance {
  id        Int      @id @default(autoincrement())
  present   Boolean  @default(true)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  Int
  createdAt DateTime @default(now())
}

model LearningObjective {
  id                  Int               @id @default(autoincrement())
  objectiveName       String
  lesson              Lesson            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId            Int
  combinedObjective   CombinedObjective @relation(fields: [combinedObjectiveId], references: [id], onDelete: Cascade)
  combinedObjectiveId Int
  studentProgress     StudentProgress[]
  Assignment          Assignment[]
}

model StudentProgress {
  id                  Int               @id @default(autoincrement())
  student             Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId           Int
  learningObjective   LearningObjective @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  objectiveId         Int
  combinedObjective   CombinedObjective @relation(fields: [combinedObjectiveId], references: [id], onDelete: Cascade)
  combinedObjectiveId Int
  progressPrecent     Int
  createdAt           DateTime          @default(now())
}

model Parent {
  id         Int     @id @default(autoincrement())
  username   String  @unique
  password   String
  parentCode String
  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId  Int
}

model StudentAccount {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String
  studentCode String
  student     Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   Int
}
